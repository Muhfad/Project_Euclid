abline(lm.fit)
I(2)
?I
# Lab
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
?Boston
lm.fit <- lm(medv ~ lstat, data = Boston)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat = c(6, 10, 15)), interval = 'confidence')
plot(lm.fit)
lm.fit2 <- lm(medv ~ lstat + I(lstat^2))
lm.fit2 = lm(medv ~ lstat + I(lstat^2))
attach(Boston)
lm.fit2 = lm(medv ~ lstat + I(lstat^2))
summary(lm.fit2)
anova(medv ~ lstat)
anova(lm(medv ~ lstat))
anova(lm.fit, lm.fit2)
plot(medv, lstat)
plot(medv, lstat, pch = 16)
abline(lm.fit)
abline(lm.fit, color = 'red')
abline(lm.fit, col = 'red')
abline(lm.fit2, col = 'blue')
curve(lm.fit2, col = 'blue')
curve(lm.fit2, col = 'blue')
lm.fit2
curve(lm.fit2, col = 'blue')
plot(lm.fit2)
lm.fit2 <- lm(medv ~ poly(lstat, 2))
summary(lm.fit2)
product = 1
product = 1
for(i in 0:1000){
if(i%2==0 | i%5==0 | i%16==0){
for(i in 1:1000){
if(i%2==0 | (i%5==0 | i%16==0)){
product = product*i
}
}
for(i in 1:1000){
if(i%2==0 | (i%5==0 | i%16==0)){
product = product*i
}
}
if(i%2==0 | (i%5==0 | i%16==0)){
product = product*i
}
if(i%5==0 | i%16==0){
product <- product*i
}
for(i in 1:1000){
if(i%5==0 || i%16==0){
product <- product*i
}
}
if(i%5==0 || i%16==0){
product <- product*i
}
for(i in 0:1000){
for(i in 1:1000){
if(i%%5==0 || i%%16==0){
product <- product*i
}
}
product
?Carseats
library(ISLR)
FIX(Carseats)
fix(Carseats)
names(Carseats)
x <- runif(25, 10, 100)
error <- runif(25)
a <- round(runif()*10)
b <- round(runif()*10)
y <- a*x + b*x^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2
plot(x, y, main = '$y \= x', pch = 16, col = 'blue')
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 25)
a <- round(runif(1)*10)
error <- runif(25)
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 25)
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 280)
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 109, 28990)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 1000)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 100)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 500)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 250)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 10, 50)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 200)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)^3
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)^1.5
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)^1.7
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 100)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
error <- runif(25, 1, 200)^2
a <- round(runif(1)*10)
b <- round(runif(1)*10)
y <- a*x + b*x^2 + error
plot(x, y, pch = 16, col = 'blue')
lm(y ~ poly(x, 2))
lm.fit <- lm(y ~ poly(x, 2))
abline(lm.fit)
curve(lm.fit)
plot(lm.fit)
lm.fit <- lm(y ~ poly(x, 2))
lm.fit
lm.fit$model
?plot
plot.formula()
graphics::plot.function(x, lm.fit$coefficients)
lm.fit
lm.fit$fitted.values
plot(x, lm.fit$fitted.values, type = 'l')
a
b
set.seed(310196)
set.seed(310196)
M <- matrix(rnorm(2000, mean = 10, sd = 10), nrow = 1000, ncol = 2)
set.seed(310196)
M <- matrix(rnorm(2000, mean = 10, sd = 10), nrow = 1000, ncol = 2)
eucdist <- function(A, B){
return( sqrt(sum(A^2 - B^2)) )
}
n
n
distance <- numeric(1000*999/2)
k <- 1
while(nrow(M) > 1){
A <- M[1, ]
N <- M[-1, ]
for(j in seq_along(nrow(N))){
B <- N[j, ]
distance[k] <- eucdist(A, B)
k <- k + 1
}
}
distance <- numeric(1000*999/2)
k <- 1
while(nrow(M) > 1){
A <- M[1, ]
N <- M[-1, ]
for(j in seq_along(nrow(N))){
B <- N[j, ]
distance[k] <- eucdist(A, B)
k <- k + 1
}
M <- N
}
NROW(m)
NROW(M)
M
set.seed(310196)
M <- matrix(rnorm(2000, mean = 10, sd = 10), nrow = 1000, ncol = 2)
length(m)
length(M)
set.seed(310196)
M <- matrix(rnorm(2000, mean = 10, sd = 10), nrow = 1000, ncol = 2)
eucdist <- function(A, B){
return( sqrt(sum(A^2 - B^2)) )
}
distance <- numeric(1000*999/2)
k <- 1
while(length(M) > 2){
A <- M[1, ]
N <- M[-1, ]
for(j in seq_along(nrow(N))){
B <- N[j, ]
distance[k] <- eucdist(A, B)
k <- k + 1
}
M <- N
}
warnings()
set.seed(310196)
M <- matrix(rnorm(2000, mean = 10, sd = 10), nrow = 1000, ncol = 2)
eucdist <- function(A, B){
return( sqrt(sum((A - B)^2)) )
}
distance <- numeric(1000*999/2)
k <- 1
while(length(M) > 2){
A <- M[1, ]
N <- M[-1, ]
for(j in seq_along(nrow(N))){
B <- N[j, ]
distance[k] <- eucdist(A, B)
k <- k + 1
}
M <- N
}
distance[length(distance)]
View(distance)
which(distance==0)
999 + 998 + 997 + ... + 3 + 2 + 1 - 1
distance != 0
sum(distance != 0)
N
set.seed(310196)
M <- matrix(rnorm(2000, mean = 10, sd = 10), nrow = 1000, ncol = 2)
N#
M[1000, ]
debug(eucdistA, B)
debug(eucdist(A, B))
install.packages('rCPP')
install.packages('Rcpp')
install.packages('rCPP')
install.packages('rCPP')
install.packages('rCPP')
installed.packages('Rcpp')
install.packages('Rcpp')
install.packages('Rcpp')
?rbenchmark::benchmark
require(rbenchmark)
A <- matrix(1:16, nrow = 4, ncol = 4)
A
A <- matrix(1:16, nrow = 4, ncol = 4, byrow = FALSE)
a
A
A <- matrix(1:16, nrow = 4, ncol = 4, byrow = TRUE)
A
A %*% A
A %*% A
A %*% A
A %*% A
A %*% A
A %*% A
A %*% A
st
Sys.time()
Sys.time()
Sys.time()
t = Sys.time()
Sys.time() - t
install.packages("microbenchmarks")
install.packages("microbenchmark")
require(ggplot2)
iinstall.packages("rvest")
install.packages("rvest")
require(ggplot2)
?geom_point
?mpg
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = 4))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = 1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = 1)) +
facet_wrap(~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = 1)) +
facet_wrap(~displ)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = 1)) +
facet_wrap(~displ)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
?facet-wrap
?facet_wrap
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
ggpot(data = mpg, mapping = aes( x=displ, y = hwy))+
geom_point() + geom_smooth()
ggplot(data = mpg, mapping = aes( x=displ, y = hwy))+
geom_point() + geom_smooth()
ggplot(data = mpg, mapping = aes( x=displ, y = hwy, group = class))+
geom_point() + geom_smooth()
ggplot(data = mpg, mapping = aes( x=displ, y = hwy, group = drv))+
geom_point() + geom_smooth()
ggplot(data = mpg, mapping = aes( x=displ, y = hwy, group = drv))+
geom_point() + geom_smooth(se = F)
ggplot(data = mpg, mapping = aes( x=displ, y = hwy, group = drv, color = drv))+
geom_point() + geom_smooth(se = F)
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) + geom_smooth( aes(x=displ, y = hwy) )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) + geom_smooth( aes(x=displ, y = hwy), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) + geom_smooth( aes(x=displ, y = hwy, group = drv), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) + geom_smooth( aes(x=displ, y = hwy, color = drv), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) + geom_smooth( aes(x=displ, y = hwy, shape = drv), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) + geom_smooth( aes(x=displ, y = hwy, size = drv), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) + geom_smooth( aes(x=displ, y = hwy), color = drv, se = F )
?geom_smooth
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) +
geom_smooth( aes(x=displ, y = hwy, linetype = drv), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) +
geom_smooth( aes(x=displ, y = hwy, weight = drv), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv)) +
geom_smooth( aes(x=displ, y = hwy, alpha = drv), se = F )
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, fill = drv))
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv))
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv, size = drv))
ggplot(data = mpg)+
geom_point(mapping = aes(x=displ, y = hwy, color = drv, weight = drv))
require(rbenchmark); require(ggplot2); require(ggrepel); require(data.table)
# contain the code for the function
source("R_code/functions.R")
set.wd("/home/medfad/Desktop/WD/2019/Abdul/Project_Euclid/
")
setwd("/home/medfad/Desktop/WD/2019/Abdul/Project_Euclid/
")
setwd("/home/medfad/Desktop/WD/2019/Abdul/Project_Euclid")
# contain the code for the function
source("R_code/functions.R")
eucdist <- function(M, group_vec=NULL, format_output=FALSE, FUN = "eucdist_C"){
f = match.fun(FUN)
ifelse(is.null(group_vec), ifelse(format_output, return(mefa::vec2dist(f(M), nrow(M))), return(f(M))), "")
unique_groups <- sort(unique(group_vec)) # all unique groups
for_one_group <- function(group_used){
row_index <- group_vec==group_used
# if(length(row_index)==1) return()
output = f(M[row_index, ])
if(format_output) return(mefa::vec2dist(output, sum(row_index)))
return(output)
}
names(unique_groups) <- unique_groups
sapply(unique_groups, for_one_group)
}
eucdist_DT <- function(M, group_vec, func="eucdist_C"){
f = match.fun(func)
M <- data.table(M, group_vec)
output <- M[, f(.SD), by=group_vec][order(group_vec)]
return(output)
}
# Using C with looping in C
system("R CMD SHLIB Group/eucdist_group.c")
# loading it into R
dyn.load("Group/eucdist_group.so")
eucdist_group_C <- function(M, group_vec, format_output = FALSE) {
unique_group = sort(unique(group_vec))
tt = as.integer(table(group_vec))
tot_length = vapply(tt, function(n) n*(n-1)/2, 0)
l = length(unique_group)
ifelse(is.integer(group_vec), group_vec_int <- group_vec, group_vec_int <- as.numeric(as.factor(group_vec))) # Nice
nn <- 1:l
out <-.C("eucdist_group",
x = as.vector(t(M), "double"),
m = as.integer(nrow(M)),
n = as.integer(ncol(M)),
d = vector("double", sum(tot_length)),
unique_group = as.integer(nn),
l = as.integer(l),
group_vec = as.integer(group_vec_int),
lg = tt
)
output = split( out$d, rep(unique_group, tot_length) )
if(format_output){
f = function(i){
# i = which(sort(unique_group) == n)
mefa::vec2dist(output[[i]], tt[i])
# i + 1
}
names(nn) <- unique_group
return(sapply(nn, f))
}
return(output)
# FORMAT THE OUTPUT IF NEEDED
}
# m = 50000; n = 2; ng=50
m = 50000; n = 2; ng=50
M <- matrix(rnorm(m*n, 10, 10), ncol = n)
M
M <- matrix(rnorm(m*n, 10, 10), ncol = n)
?rnorM
?rnorm
M <- matrix(rnorm(m*n, 10, 10), ncol = n)
M
M <- matrix(rnorm(m*n, mean = 10, sd = 10), ncol = n)
M
group_vec <- sample(1:ng, m, T)
eucdist_group_C(M, group_vec = group_vec)
profvis::profvis({    group_vec <- sample(1:50, i, T)})
eucdist_group_C(M, group_vec = group_vec)
